"""
Django settings for BlitzPrompt project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = [
    'localhost', 
    '127.0.0.1',
    'blitzprompt-q5x7.onrender.com',
    '.onrender.com'
]

# API Keys
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BlitzPrompt.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BlitzPrompt.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Check if we're on Render
ON_RENDER = os.environ.get('RENDER', '') == 'true'
DATABASE_URL = os.environ.get('DATABASE_URL', '')

print(f"DEBUG INFO - DATABASE_URL: '{DATABASE_URL}'")
print(f"DEBUG INFO - RENDER: '{ON_RENDER}'")

if DATABASE_URL:
    # Use PostgreSQL on Render with DATABASE_URL
    print(f"Using PostgreSQL database with URL: {DATABASE_URL}")
    
    # Convert postgresql:// to postgres:// if needed (dj-database-url compatibility)
    if DATABASE_URL.startswith('postgresql://'):
        print("Converting postgresql:// to postgres:// for compatibility")
        DATABASE_URL = DATABASE_URL.replace('postgresql://', 'postgres://', 1)
    
    # Parse DATABASE_URL manually as a fallback if dj_database_url has issues
    if DATABASE_URL.startswith('postgres://'):
        # Handle connection details manually if needed
        try:
            DATABASES = {
                'default': dj_database_url.parse(DATABASE_URL)
            }
        except Exception as e:
            print(f"Error parsing DATABASE_URL with dj_database_url: {e}")
            # Fallback to manual configuration
            db_parts = DATABASE_URL.replace('postgres://', '').split('@')
            auth = db_parts[0].split(':')
            host_port_db = db_parts[1].split('/')
            host_port = host_port_db[0].split(':')
            
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': host_port_db[1].split('?')[0],  # Remove query params if present
                    'USER': auth[0],
                    'PASSWORD': auth[1],
                    'HOST': host_port[0],
                    'PORT': host_port[1] if len(host_port) > 1 else '5432',
                }
            }
    else:
        # Default dj_database_url configuration
        DATABASES = {
            'default': dj_database_url.config(
                default=DATABASE_URL,
                conn_max_age=600,
                conn_health_checks=True,
            )
        }
elif ON_RENDER:
    # If we're on Render but DATABASE_URL is not set, use SQLite
    print("DATABASE_URL not found but RENDER=True, using SQLite fallback")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    # Use SQLite locally
    print("Using SQLite database for local development")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Print the current database configuration for debugging
if 'default' in DATABASES and 'ENGINE' in DATABASES['default']:
    print(f"Final database engine: {DATABASES['default']['ENGINE']}")
else:
    print("WARNING: No database engine configured!")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'core/static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Authentication settings
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
